$date
	Tue Jan  3 13:04:32 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 8 ! z [7:0] $end
$var wire 8 " y [7:0] $end
$var wire 8 # x [7:0] $end
$var wire 8 $ w [7:0] $end
$var reg 5 % a [4:0] $end
$var reg 5 & b [4:0] $end
$var reg 5 ' c [4:0] $end
$var reg 5 ( d [4:0] $end
$var reg 5 ) e [4:0] $end
$var reg 5 * f [4:0] $end
$scope module dut $end
$var wire 5 + a [4:0] $end
$var wire 5 , b [4:0] $end
$var wire 5 - c [4:0] $end
$var wire 5 . d [4:0] $end
$var wire 5 / e [4:0] $end
$var wire 5 0 f [4:0] $end
$var wire 8 1 z [7:0] $end
$var wire 8 2 y [7:0] $end
$var wire 8 3 x [7:0] $end
$var wire 8 4 w [7:0] $end
$var wire 32 5 concat [31:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 6 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 6
b100000010100100011011010110111 5
b100000 4
b1010010 3
b110110 2
b10110111 1
b1101 0
b1101 /
b11 .
b1001 -
b1 ,
b100 +
b1101 *
b1101 )
b11 (
b1001 '
b1 &
b100 %
b100000 $
b1010010 #
b110110 "
b10110111 !
$end
#1
b1110111 !
b1110111 1
b11011011 "
b11011011 2
b10000010 #
b10000010 3
b101100 $
b101100 4
b11101 *
b11101 0
b10110 )
b10110 /
b1101 (
b1101 .
b1 '
b1 -
b10010 &
b10010 ,
b101100100000101101101101110111 5
b101 %
b101 +
b1 6
#2
b10101011 !
b10101011 1
b1100010 "
b1100010 2
b110010 #
b110010 3
b1101011 $
b1101011 4
b1010 *
b1010 0
b101 )
b101 /
b110 (
b110 .
b11001 '
b11001 -
b1100 &
b1100 ,
b1101011001100100110001010101011 5
b1101 %
b1101 +
b10 6
#3
b111011 !
b111011 1
b11111001 "
b11111001 2
b11100100 #
b11100100 3
b101101 $
b101101 4
b1110 *
b1110 0
b10010 )
b10010 /
b1111 (
b1111 .
b10010 '
b10010 -
b10111 &
b10111 ,
b101101111001001111100100111011 5
b101 %
b101 +
b11 6
#4
b10010111 !
b10010111 1
b11010110 "
b11010110 2
b1111001 #
b1111001 3
b1000001 $
b1000001 4
b101 *
b101 0
b1101 )
b1101 /
b11101 (
b11101 .
b11100 '
b11100 -
b101 &
b101 ,
b1000001011110011101011010010111 5
b1000 %
b1000 +
b100 6
#5
b1110111 !
b1110111 1
b101 "
b101 2
b10000000 #
b10000000 3
b11010 $
b11010 4
b11101 *
b11101 0
b1010 )
b1010 /
b0 (
b0 .
b0 '
b0 -
b1010 &
b1010 ,
b11010100000000000010101110111 5
b11 %
b11 +
b101 6
#6
b11010111 !
b11010111 1
b110101 "
b110101 2
b11011011 #
b11011011 3
b10110100 $
b10110100 4
b10101 *
b10101 0
b1011 )
b1011 /
b10011 (
b10011 .
b1101 '
b1101 -
b10011 &
b10011 ,
b10110100110110110011010111010111 5
b10110 %
b10110 +
b110 6
#7
b10101011 !
b10101011 1
b11110001 "
b11110001 2
b10111010 #
b10111010 3
b10011 $
b10011 4
b1010 *
b1010 0
b11 )
b11 /
b1111 (
b1111 .
b11101 '
b11101 -
b1110 &
b1110 ,
b10011101110101111000110101011 5
b10 %
b10 +
b111 6
#8
b1000 6
